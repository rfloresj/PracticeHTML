Formatting elements were designed to display special types of text:
<b> - Bold text
<strong> - Important text
<i> - Italic text
<em> - Emphasized text // Tip: A screen reader will pronounce the words in <em> with an emphasis, using verbal stress.
<mark> - Marked text
<small> - Smaller text
<del> - Deleted text
<ins> - Inserted text
<sub> - Subscript text
<sup> - Superscript text

HTML Quotation and Citation Elements
Tag	Description
<abbr>	Defines an abbreviation or acronym
<address>	Defines contact information for the author/owner of a document
<bdo>	Defines the text direction
<blockquote>	Defines a section that is quoted from another source
<cite>	Defines the title of a work
<q>	Defines a short inline quotation

<p>Same as color name "Tomato":</p>

<h1 style="background-color:rgb(255, 99, 71)">rgb(255, 99, 71)</h1>
<h1 style="background-color:#ff6347;">#ff6347</h1>
<h1 style="background-color:hsl(9, 100%, 64%);">hsl(9, 100%, 64%)</h1>

<p>Same as color name "Tomato", but 50% transparent:</p>
<h1 style="background-color:rgba(255, 99, 71, 0.5);">rgba(255, 99, 71, 0.5)</h1>
<h1 style="background-color:hsla(9, 100%, 64%, 0.5);">hsla(9, 100%, 64%, 0.5)</h1>

<p>In addition to the predefined color names, colors can be specified using RGB, HEX, HSL, or even transparent colors using RGBA or HSLA color values.</p>

An RGB color value represents RED, GREEN, and BLUE light sources.
An RGBA color value is an extension of RGB with an Alpha channel (opacity).
Shades of gray are often defined using equal values for all three parameters:
rgb(60, 60, 60), 
rgb(180, 180, 180)

Where rr (red), gg (green) and bb (blue) are hexadecimal values between 00 and ff (same as decimal 0-255).
For example, #ff0000 is displayed as red, because red is set to its highest value (ff), and the other two 
(green and blue) are set to 00.

HSL stands for hue, saturation, and lightness.
HSLA color values are an extension of HSL with an Alpha channel (opacity)
hsl(hue, saturation, lightness)

Hue is a degree on the color wheel from 0 to 360. 0 is red, 120 is green, and 240 is blue.
Saturation is a percentage value, 0% means a shade of gray, and 100% is the full color.
Lightness is also a percentage value, 0% is black, and 100% is white.
<h1 style="background-color:hsl(0, 100%, 50%);">hsl(0, 100%, 50%)</h1>

hsla(hue, saturation, lightness, alpha)
HSLA color values are an extension of HSL color values with an Alpha channel - 
which specifies the opacity for a color.

CSS stands for Cascading Style Sheets.
Cascading Style Sheets (CSS) is used to format the layout of a webpage.
Inline - by using the style attribute inside HTML elements
Internal - by using a <style> element in the <head> section
External - by using a <link> element to link to an external CSS file

n internal CSS is used to define a style for a single HTML page.
An internal CSS is defined in the <head> section of an HTML page, within a <style> element.

<style>
        body {background-color: powderblue;}
        h1 {color: blue;}
        p {color: red;}
    </style>

<body style="background-color: rgb(255, 255, 255);"></body>

External CSS
An external style sheet is used to define the style for many HTML pages.

To use an external style sheet, add a link to it in the <head> section of each HTML page:

<!DOCTYPE html>
<html>
<head>
  <link rel="stylesheet" href="styles.css">
</head>
<body>

<h1>This is a heading</h1>
<p>This is a paragraph.</p>

</body>
</html>

CSS Padding
The CSS padding property defines a padding (space) between the text and the border.

CSS Margin
The CSS margin property defines a margin (space) outside the border.

Use the HTML style attribute for inline styling
Use the HTML <style> element to define internal CSS
Use the HTML <link> element to refer to an external CSS file
Use the HTML <head> element to store <style> and <link> elements
Use the CSS color property for text colors
Use the CSS font-family property for text fonts
Use the CSS font-size property for text sizes
Use the CSS border property for borders
Use the CSS padding property for space inside the border
Use the CSS margin property for space outside the border

Tag	Description
<style>	Defines style information for an HTML document
<link>	Defines a link between a document and an external resource
--LINKS--

The HTML <a> tag defines a hyperlink. It has the following syntax:
<a href="https://www.w3schools.com/">Visit W3Schools.com!</a>
The target attribute specifies where to open the linked document.
The target attribute can have one of the following values:
_self - Default. Opens the document in the same window/tab as it was clicked
_blank - Opens the document in a new window or tab
_parent - Opens the document in the parent frame
_top - Opens the document in the full body of the window
<a href="https://www.w3schools.com/" target="_blank">Visit W3Schools!</a>
Image as a link
<a href="default.asp">
<img src="smiley.gif" alt="HTML tutorial" style="width:42px;height:42px;">
</a>

Use mailto: inside the href attribute to create a link that opens the user's email program (to let them send a new email)
<a href="mailto:someone@example.com">Send email</a>
Link to a page located in the html folder on the current web site: 
<a href="/html/default.asp">HTML tutorial</a>
Link to a page located in the same folder as the current page: 
<a href="default.asp">HTML tutorial</a>

Use the <a> element to define a link
Use the href attribute to define the link address
Use the target attribute to define where to open the linked document
Use the <img> element (inside <a>) to use an image as a link
Use the mailto: scheme inside the href attribute to create a link that opens the user's email program
<a>	Defines a hyperlink
-Link Bookmarks-
Use the id attribute (id="value") to define bookmarks in a page
Use the href attribute (href="#value") to link to the bookmark

--HTML Images--
The HTML <img> tag is used to embed an image in a web page.

Images are not technically inserted into a web page; images are linked to web pages. The <img> tag creates a holding space for the referenced image.

The <img> tag is empty, it contains attributes only, and does not have a closing tag.

The <img> tag has two required attributes:

src - Specifies the path to the image
alt - Specifies an alternate text for the image
<img src="url" alt="alternatetext">

Here are the most common image file types, which are supported in all browsers (Chrome, Edge, Firefox, Safari, Opera):
APNG	Animated Portable Network Graphics	.apng
GIF	Graphics Interchange Format	.gif
ICO	Microsoft Icon	.ico, .cur
JPEG	Joint Photographic Expert Group image	.jpg, .jpeg, .jfif, .pjpeg, .pjp
PNG	Portable Network Graphics	.png
SVG	Scalable Vector Graphics	.svg

Use the HTML <img> element to define an image
Use the HTML src attribute to define the URL of the image
Use the HTML alt attribute to define an alternate text for an image, if it cannot be displayed
Use the HTML width and height attributes or the CSS width and height properties to define the size of the image
Use the CSS float property to let the image float to the left or to the right

!Note: Loading large images takes time, and can slow down your web page. Use images carefully!

Tag	Description
<img>	Defines an image
<map>	Defines an image map
<area>	Defines a clickable area inside an image map
<picture>	Defines a container for multiple image resources

The HTML <map> tag defines an image map. An image map is an image with clickable areas. The areas are defined with one or more <area> tags.
Try to click on the computer, phone, or the cup of coffee in the image below:

<img src="workplace.jpg" alt="Workplace" usemap="#workmap">

<map name="workmap">
  <area shape="rect" coords="34,44,270,350" alt="Computer" href="computer.htm">
  <area shape="rect" coords="290,172,333,250" alt="Phone" href="phone.htm">
  <area shape="circle" coords="337,300,44" alt="Coffee" href="coffee.htm">
</map>

Shape
You must define the shape of the clickable area, and you can choose one of these values:

rect - defines a rectangular region
circle - defines a circular region
poly - defines a polygonal region
default - defines the entire region

You must also define some coordinates to be able to place the clickable area onto the image. 

Background Image on a HTML element
To add a background image on an HTML element, use the HTML style attribute and the CSS background-image property:

Add a background image on a HTML element:

<p style="background-image: url('img_girl.jpg');">

body{
    background-image: url('https://cdn.pixabay.com/photo/2022/06/21/21/56/konigssee-7276585_960_720.jpg');
    background-repeat: no-repeat;
    background-attachment: fixed;
    background-size: cover;
}
The HTML <picture> element allows you to display different pictures for different devices or screen sizes.
Show different images for different screen sizes:

<picture>
  <source media="(min-width: 650px)" srcset="img_food.jpg">
  <source media="(min-width: 465px)" srcset="img_car.jpg">
  <img src="img_girl.jpg">
</picture>
The img element is required as the last child tag of the picture declaration block.
The img element is used to provide backward compatibility for browsers that do not support the picture element, or if none of the source tags matched.
Note: The picture element is not supported in IE12 and earlier or Safari 9.0 and earlier.

There are two main purposes for the <picture> element:

1. Bandwidth
If you have a small screen or device, it is not necessary to load a large image file. The browser will use the first <source> element with matching attribute values, and ignore any of the following elements.

2. Format Support
Some browsers or devices may not support all image formats. By using the <picture> element, you can add images of all formats, and the browser will use the first format it recognizes, and ignore any of the following elements.

--HTML Favicon--
A favicon is a small image displayed next to the page title in the browser tab.
How To Add a Favicon in HTML
You can use any image you like as your favicon. You can also create your own favicon on sites like https://www.favicon.cc.

The following table shows the file format support for a favicon image:

Browser	ICO	PNG	GIF	JPEG	SVG
Edge	Yes	Yes	Yes	Yes	Yes
Chrome	Yes	Yes	Yes	Yes	Yes
Firefox	Yes	Yes	Yes	Yes	Yes
Opera	Yes	Yes	Yes	Yes	Yes
Safari	Yes	Yes	Yes	Yes	Yes

--HTML Tables--
=======
Each table cell is defined by a <td> and a </td> tag.
td stands for table data.
Everything between <td> and </td> are the content of the table cell
Each table row starts with a <tr> and end with a </tr> tag.
tr stands for table row.
Sometimes you want your cells to be headers, in those cases use the <th> tag instead of the <td> tag:
By default, the text in <th> elements are bold and centered, but you can change that with CSS.

The <caption> tag defines a table caption.
The <caption> tag must be inserted immediately after the <table> tag.
<caption>Monthly savings</caption>

The colspan attribute defines the number of columns a header cell should span.
<th colspan="number">

HTML <td> rowspan Attribute
The rowspan attribute specifies the number of rows a cell should span.
<td rowspan="number">
number	Specifies the number of rows a cell should span. Note: rowspan="0"
tells the browser to span the cell to the last row of the table section 
(thead, tbody, or tfoot). Chrome, Firefox, and Opera 12 (and earlier versions) support rowspan="0".
<table>	Defines a table
<th>	Defines a header cell in a table
<tr>	Defines a row in a table
<td>	Defines a cell in a table
<caption>	Defines a table caption
<colgroup>	Specifies a group of one or more columns in a table for formatting
<col>	Specifies column properties for each column within a <colgroup> element
<thead>	Groups the header content in a table
<tbody>	Groups the body content in a table
<tfoot>	Groups the footer content in a table

Collapsed Table Borders
To avoid having double borders like in the example above, set the CSS border-collapse property to collapse.
This will make the borders collapse into a single border
With the border-radius property, the borders get rounded corners

Skip the border around the table by leaving out table from the css selector
With the border-style property, you can set the appereance of the border.
The following values are allowed:
dotted dashed solid double groove ridge inset outset none hidden

-Padding-
Cell padding is the space between the cell edges and the cell content.
By default the padding is set to 0.
To add padding on table cells, use the CSS padding property:

th, td {
  padding: 15px;
}

To add padding only above the content, use the padding-top property.
And the others sides with the padding-bottom, padding-left, and padding-right properties:
Example
th, td {
  padding-top: 10px;
  padding-bottom: 20px;
  padding-left: 30px;
  padding-right: 40px;
}

-Cell Spacing-
Cell spacing is the space between each cell.
By default the space is set to 2 pixels.
table {
  border-spacing: 30px;
}

-Colspan & Rowspan-y
<table>
  <tr>
    <th colspan="2">Name</th>
    <th>Age</th>
  </tr>

<tr>
    <th rowspan="2">P
    hone</th>
    <td>555-1234</td>
  </tr>

-Table - Zebra Stripes-
If you add a background color on every other table row, you will get a nice zebra stripes effect.
To style every other table row element, use the :nth-child(even) selector like this:
tr:nth-child(even) {
  background-color: #D6EEEE;
}

Note: If you use (odd) instead of (even), the styling will occur on row 1,3,5 etc. instead of 2,4,6 etc.
Set the :nth-child(even) for table data elements like this:
td:nth-child(even), th:nth-child(even) {
  background-color: #D6EEEE;
}

Put the :nth-child() selector on both th and td elements if you want to have the styling on both headers and regular table cells.
Use an rgba() color to specify the transparency of the color:
tr:nth-child(even) {
  background-color: rgba(150, 212, 212, 0.4);
}

th:nth-child(even),td:nth-child(even) {
  background-color: rgba(150, 212, 212, 0.4);
}

-Horizontal Dividers-

If you specify borders only at the bottom of each table row, you will have a table with horizontal dividers.

Add the border-bottom property to all tr elements to get horizontal dividers:

Example
tr {
  border-bottom: 1px solid #ddd;
}

-Hoverable Table- *
Use the :hover selector on tr to highlight table rows on mouse over:
tr:hover {background-color: #D6EEEE;}

--Block-level Elements--

The <p> element defines a paragraph in an HTML document.

The <div> element defines a division or a section in an HTML document.

The <p> element is a block-level element.

The <div> element is a block-level element.

Here are the block-level elements in HTML:

<address><article><aside><blockquote><canvas><dd><div><dl><dt><fieldset><figcaption><figure><footer><form><h1>-<h6><header>
<hr><li><main><nav><noscript><ol><p><pre><section><table><tfoot><ul><video>

--Inline Elements--

An inline element does not start on a new line.

An inline element only takes up as much width as necessary.

This is a <span> element inside a paragraph.

Here are the inline elements in HTML:

<a><abbr><acronym><b><bdo><big><br><button><cite><code><dfn><em><i><img><input>
<kbd><label><map><object><output><q><samp><script><select><small><span><strong><sub><sup><textarea><time><tt><var>

Note: An inline element cannot contain a block-level element!

--The <div> Element--

The <div> element is often used as a container for other HTML elements.

The <div> element has no required attributes, but style, class and id are common.

When used together with CSS, the <div> element can be used to style blocks of content:

--The <span> Element--

The <span> element has no required attributes, but style, class and id are common.

--HTML class Attribute--

The HTML class attribute is used to specify a class for an HTML element.

Multiple HTML elements can share the same class.

The class attribute is often used to point to a class name in a style sheet. It can also be used by a JavaScript 
to access and manipulate elements with the specific class name.

Tip: The class attribute can be used on any HTML element.

Note: The class name is case sensitive!

Tip: You can learn much more about CSS in our CSS Tutorial.

-Multiple Classes-

HTML elements can belong to more than one class.

To define multiple classes, separate the class names with a space, e.g. <div class="city main">. The element will be styled according to all the classes specified.

In the following example, the first <h2> element belongs to both the city class and also to the main class, and will get the CSS styles from both of the classes: 

.city {
  background-color: tomato;
  color: white;
  padding: 10px;
} 

.main {
  text-align: center;
}
</style>
</head>
<body>

<h2>Multiple Classes</h2>
<p>Here, all three h2 elements belongs to the "city" class. In addition, London also belongs to the "main" class, which center-aligns the text.</p>

<h2 class="city main">London</h2>
<h2 class="city">Paris</h2>
<h2 class="city">Tokyo</h2>

</body>
</html>

-Different Elements Can Share Same Class-

-Use of The class Attribute in JavaScript-

The class name can also be used by JavaScript to perform certain tasks for specific elements.

JavaScript can access elements with a specific class name with the getElementsByClassName() method:

<script>
function myFunction() {
  var x = document.getElementsByClassName("city");
  for (var i = 0; i < x.length; i++) {
    x[i].style.display = "none";
  }
}
</script>

The HTML class attribute specifies one or more class names for an element
Classes are used by CSS and JavaScript to select and access specific elements
The class attribute can be used on any HTML element
The class name is case sensitive
Different HTML elements can point to the same class name
JavaScript can access elements with a specific class name with the getElementsByClassName() method

--HTML id Attribute--

The HTML id attribute is used to specify a unique id for an HTML element.

You cannot have more than one element with the same id in an HTML document.

The syntax for id is: write a hash character (#), followed by an id name. Then, define the CSS properties within curly braces {}.

In the following example we have an <h1> element that points to the id name "myHeader". This <h1> element will be styled according to the #myHeader style definition in the head section:

Example:

<!DOCTYPE html>
<html>
<head>
<style>
#myHeader {
  background-color: lightblue;
  color: black;
  padding: 40px;
  text-align: center;
}
</style>
</head>
<body>

<h1 id="myHeader">My Header</h1>

</body>
</html>

Note: The id name is case sensitive!

Note: The id name must contain at least one character,
cannot start with a number, and must not contain whitespaces (spaces, tabs, etc.).

Difference Between Class and ID
A class name can be used by multiple HTML elements, while an id name must only be
used by one HTML element within the page:

<style>
/* Style the element with the id "myHeader" */
#myHeader {
  background-color: lightblue;
  color: black;
  padding: 40px;
  text-align: center;
}

/* Style all elements with the class name "city" */
.city {
  background-color: tomato;
  color: white;
  padding: 10px;
}
</style>

<!-- An element with a unique id -->
<h1 id="myHeader">My Cities</h1>

<!-- Multiple elements with same class -->
<h2 class="city">London</h2>
<p>London is the capital of England.</p>

<h2 class="city">Paris</h2>
<p>Paris is the capital of France.</p>

<h2 class="city">Tokyo</h2>
<p>Tokyo is the capital of Japan.</p>

--HTML Bookmarks with ID and Links--

HTML bookmarks are used to allow readers to jump to specific parts of a webpage.

Bookmarks can be useful if your page is very long.

To use a bookmark, you must first create it, and then add a link to it.

Then, when the link is clicked, the page will scroll to the location with the bookmark.

Example
First, create a bookmark with the id attribute:

<h2 id="C4">Chapter 4</h2>
Then, add a link to the bookmark ("Jump to Chapter 4"), from within the same page:

Example
<a href="#C4">Jump to Chapter 4</a>
Or, add a link to the bookmark ("Jump to Chapter 4"), from another page:

<a href="html_demo.html#C4">Jump to Chapter 4</a>

-HTML Iframes--

An HTML iframe is used to display a web page within a web page.

HTML Iframe Syntax
The HTML <iframe> tag specifies an inline frame.

An inline frame is used to embed another document within the current HTML document.

Syntax
<iframe src="url" title="description"></iframe>

Tip: It is a good practice to always include a title attribute for the <iframe>.
This is used by screen readers to read out what the content of the iframe is.

Iframe - Set Height and Width
Use the height and width attributes to specify the size of the iframe.

The height and width are specified in pixels by default:

<iframe src="demo_iframe.htm" height="200" width="300" title="Iframe Example"></iframe>

Or you can add the style attribute and use the CSS height and width properties:

<iframe src="demo_iframe.htm" style="height:200px;width:300px;" title="Iframe Example"></iframe>

The HTML <iframe> tag specifies an inline frame
The src attribute defines the URL of the page to embed
Always include a title attribute (for screen readers)
The height and width attributes specifies the size of the iframe
Use border:none; to remove the border around the iframe

--HTML JavaScript--

<script>	Defines a client-side script
<noscript>	Defines an alternate content for users that do not support client-side scripts

The HTML <noscript> Tag
The HTML <noscript> tag defines an alternate content to be displayed to users that have disabled 
scripts in their browser or have a browser that doesn't support scripts:

<script>
document.getElementById("demo").innerHTML = "Hello JavaScript!";
</script>
<noscript>Sorry, your browser does not support JavaScript!</noscript>

A browser without support for JavaScript will show the text written inside the noscript element.

<script>	Defines a client-side script
<noscript>	Defines an alternate content for users that do not support client-side scripts

--HTML File Paths--

A file path describes the location of a file in a web site's folder structure.

Path	Description
<img src="picture.jpg">	The "picture.jpg" file is located in the same folder as the current page
<img src="images/picture.jpg">	The "picture.jpg" file is located in the images folder in the current folder
<img src="/images/picture.jpg">	The "picture.jpg" file is located in the images folder at the root of the current web
<img src="../picture.jpg">	The "picture.jpg" file is located in the folder one level up from the current folder

-HTML File Paths-

A file path describes the location of a file in a web site's folder structure.

File paths are used when linking to external files, like:

Web pages
Images
Style sheets
JavaScripts

Best Practice
It is best practice to use relative file paths (if possible).

When using relative file paths, your web pages will not be bound to your current base URL. All links will work on your own Computer
(localhost) as well as on your current public domain and your future public domains.

--HTML - The Head Element--

The HTML <head> element is a container for the following elements: <title>, <style>, <meta>, <link>, <script>, and <base>.

The <head> element is a container for metadata (data about data) and is placed between the <html> tag and the <body> tag.

HTML metadata is data about the HTML document. Metadata is not displayed.

Metadata typically define the document title, character set, styles, scripts, and other meta information.

--The HTML <title> Element--

The <title> element defines the title of the document. The title must be text-only, 
and it is shown in the browser's title bar or in the page's tab.

The <title> element is required in HTML documents!

The contents of a page title is very important for search engine optimization (SEO)! The page title is used by search engine 
algorithms to decide the order when listing pages in search results.

The <title> element:

defines a title in the browser toolbar
provides a title for the page when it is added to favorites
displays a title for the page in search engine-results}

--The HTML <style> Element--

The <style> element is used to define style information for a single HTML page.

--The HTML <link> Element--
The <link> element defines the relationship between the current document and an external resource.

The <link> tag is most often used to link to external style sheets:

Example
<link rel="stylesheet" href="mystyle.css">

--The HTML <meta> Element--
The <meta> element is typically used to specify the character set, page description,
keywords, author of the document, and viewport settings.

The metadata will not be displayed on the page, but are used by browsers (how to display content or reload page), 
by search engines (keywords), and other web services.

Define the character set used:

<meta charset="UTF-8">
Define keywords for search engines:

<meta name="keywords" content="HTML, CSS, JavaScript">
Define a description of your web page:

<meta name="description" content="Free Web tutorials">
Define the author of a page:

<meta name="author" content="John Doe">
Refresh document every 30 seconds:

<meta http-equiv="refresh" content="30">
Setting the viewport to make your website look good on all devices:

<meta name="viewport" content="width=device-width, initial-scale=1.0">

--Setting The Viewport--

The viewport is the user's visible area of a web page. It varies with the device - it will be smaller on a mobile phone than on a computer screen.

You should include the following <meta> element in all your web pages:

<meta name="viewport" content="width=device-width, initial-scale=1.0">
This gives the browser instructions on how to control the page's dimensions and scaling.

The width=device-width part sets the width of the page to follow the screen-width of the device (which will vary depending on the device).

The initial-scale=1.0 part sets the initial zoom level when the page is first loaded by the browser.

--The HTML <base> Element--
The <base> element specifies the base URL and/or target for all relative URLs in a page.

The <base> tag must have either an href or a target attribute present, or both.

There can only be one single <base> element in a document!

Specify a default URL and a default target for all links on a page:

<head>
<base href="https://www.w3schools.com/" target="_blank">
</head>

<body>
<img src="images/stickman.gif" width="24" height="39" alt="Stickman">
<a href="tags/tag_base.asp">HTML base Tag</a>
</body>

The <head> element is a container for metadata (data about data)
The <head> element is placed between the <html> tag and the <body> tag
The <title> element is required and it defines the title of the document
The <style> element is used to define style information for a single document
The <link> tag is most often used to link to external style sheets
The <meta> element is typically used to specify the character set, page description, keywords, author of the document, and viewport settings
The <script> element is used to define client-side JavaScripts
***The <base> element specifies the base URL and/or target for all relative URLs in a page***

--HTML Layout Elements and Techniques--

Websites often display content in multiple columns (like a magazine or a newspaper).

--HTML Layout Elements--

HTML has several semantic elements that define the different parts of a web page:

<header> - Defines a header for a document or a section
<nav> - Defines a set of navigation links
<section> - Defines a section in a document
<article> - Defines an independent, self-contained content
<aside> - Defines content aside from the content (like a sidebar)
<footer> - Defines a footer for a document or a section
<details> - Defines additional details that the user can open and close on demand
<summary> - Defines a heading for the <details> element
You can read more about semantic elements in our HTML Semantics chapter

https://www.w3schools.com/html/img_sem_elements.gif

--HTML Layout Techniques--

There are four different techniques to create multicolumn layouts. Each technique has its pros and cons:

CSS framework
CSS float property
CSS flexbox
CSS grid

-CSS Frameworks-
If you want to create your layout fast, you can use a CSS framework, like W3.CSS or Bootstrap.

-CSS Float Layout-
It is common to do entire web layouts using the CSS float property. Float is easy to learn - 
you just need to remember how the float and clear properties work. 
Disadvantages: Floating elements are tied to the document flow, which may harm the flexibility.

-CSS Flexbox Layout-
Use of flexbox ensures that elements behave predictably when the page layout must accommodate different screen sizes and different display devices.

-CSS Grid Layout-
The CSS Grid Layout Module offers a grid-based layout system, with rows and columns, making it easier to design web pages without having to use floats and positioning.

--HTML Responsive Web Design--

Responsive web design is about creating web pages that look good on all devices!

A responsive web design will automatically adjust for different screen sizes and viewports.

Responsive Web Design is about using HTML and CSS to automatically resize, hide, shrink, or enlarge, a website, to make it look good on all devices (desktops, tablets, and phones)

Setting The Viewport
To create a responsive website, add the following <meta> tag to all your web pages:

Example
<meta name="viewport" content="width=device-width, initial-scale=1.0">

-Responsive Images-

Responsive images are images that scale nicely to fit any browser size.

Using the width Property
If the CSS width property is set to 100%, the image will be responsive and scale up and down.

-Using the max-width Property-

If the max-width property is set to 100%, the image will scale down if it has to, but never 
scale up to be larger than its original size.

-Show Different Images Depending on Browser Width-

<picture>
  <source srcset="img_smallflower.jpg" media="(max-width: 600px)">
  <source srcset="img_flowers.jpg" media="(max-width: 1500px)">
  <source srcset="flowers.jpg">
  <img src="img_smallflower.jpg" alt="Flowers">
</picture>

-Responsive Text Size-

The text size can be set with a "vw" unit, which means the "viewport width".

That way the text size will follow the size of the browser window.

<h1 style="font-size:8vw;">Responsive Text</h1>

<p style="font-size:5vw;">Resize the browser window to see how the text size scales.</p>

<p style="font-size:5vw;">Use the "vw" unit when sizing the text. 10vw will set the size to 10% of the viewport width.</p>

<p>Viewport is the browser window size. 1vw = 1% of viewport width. If the viewport is 50cm wide, 1vw is 0.5cm.</p>

-Media Queries-

In addition to resize text and images, it is also common to use media queries in responsive web pages.

With media queries you can define completely different styles for different browser sizes.

Example: resize the browser window to see that the three div elements below will display horizontally 
on large screens and stacked vertically on small screens.

-Responsive Web Design - Frameworks-

All popular CSS Frameworks offer responsive design.

They are free, and easy to use.

-Bootstrap-

Another popular CSS framework is Bootstrap. Bootstrap uses HTML, CSS and jQuery to make responsive web pages.

--HTML Computer Code Elements--

HTML contains several elements for defining user input and computer code.

-HTML <kbd> For Keyboard Input-

The HTML <kbd> element is used to define keyboard input. The content inside is displayed in the browser's 
default monospace font.

-HTML <samp> For Program Output-

The HTML <samp> element is used to define sample output from a computer program. 
The content inside is displayed in the browser's default monospace font.

-HTML <code> For Computer Code-

The HTML <code> element  is used to define a piece of computer code. 
The content inside is displayed in the browser's default monospace font.

Notice that the <code> element does not preserve extra whitespace and line-breaks.

To fix this, you can put the <code> element inside a <pre> element:

<pre>
<code>
x = 5;
y = 6;
z = x + y;
</code>
</pre>

-HTML <var> For Variables-

The HTML <var> element  is used to define a variable in programming or in a mathematical expression. 
The content inside is typically displayed in italic.

The <kbd> element defines keyboard input
The <samp> element defines sample output from a computer program
The <code> element defines a piece of computer code
The <var> element defines a variable in programming or in a mathematical expression
The <pre> element defines preformatted text

--HTML Semantic Elements--

Semantic elements = elements with a meaning.

 semantic element clearly describes its meaning to both the browser and the developer.

Examples of non-semantic elements: <div> and <span> - Tells nothing about its content.

Examples of semantic elements: <form>, <table>, and <article> - Clearly defines its content.

-Semantic Elements in HTML-

Many web sites contain HTML code like: <div id="nav"> <div class="header"> <div id="footer"> to indicate navigation, header, and footer.

In HTML there are some semantic elements that can be used to define different parts of a web page:  

<article>
<aside>
<details>
<figcaption>
<figure>
<footer>
<header>
<main>
<mark>
<nav>
<section>
<summary>
<time>

https://www.w3schools.com/html/img_sem_elements.gif

-HTML <section> Element-



The <section> element defines a section in a document.

According to W3C's HTML documentation: "A section is a thematic grouping of content, typically with a heading."

Examples of where a <section> element can be used:

Chapters
Introduction
News items
Contact information
A web page could normally be split into sections for introduction, content, and contact information.

-HTML <article> Element-

The <article> element specifies independent, self-contained content.

An article should make sense on its own, and it should be possible to distribute it independently from the rest of the web site.

Examples of where the <article> element can be used:

Forum posts
Blog posts
User comments
Product cards
Newspaper articles

-HTML <header> Element-

The <header> element represents a container for introductory content or a set of navigational links.

A <header> element typically contains:

one or more heading elements (<h1> - <h6>)
logo or icon
authorship information
Note: You can have several <header> elements in one HTML document. However, <header> cannot be placed within a <footer>, <address> or another <header> element.

-HTML <footer> Element-

The <footer> element defines a footer for a document or section.

A <footer> element typically contains:

authorship information
copyright information
contact information
sitemap
back to top links
related documents
You can have several <footer> elements in one document.

-HTML <nav> Element-

The <nav> element defines a set of navigation links.

Notice that NOT all links of a document should be inside a <nav> element. The <nav> element is intended only for major block of navigation links.

Browsers, such as screen readers for disabled users, can use this element to determine whether to omit the initial rendering of this content.

<!DOCTYPE html>
<html>
<body>

<nav>
  <a href="/html/">HTML</a> |
  <a href="/css/">CSS</a> |
  <a href="/js/">JavaScript</a> |
  <a href="/jquery/">jQuery</a>
</nav>

</body>
</html>

-HTML <aside> Element-

The <aside> element defines some content aside from the content it is placed in (like a sidebar).

The <aside> content should be indirectly related to the surrounding content.

-HTML <figure> and <figcaption> Elements-

The <figure> tag specifies self-contained content, like illustrations, diagrams, photos, code listings, etc.

The <figcaption> tag defines a caption for a <figure> element. The <figcaption> element can be placed as the first or as the last child of a <figure> element.

The <img> element defines the actual image/illustration. 

<figure>
  <img src="pic_trulli.jpg" alt="Trulli" style="width:100%">
  <figcaption>Fig.1 - Trulli, Puglia, Italy.</figcaption>
</figure>

Semantic Elements in HTML
Below is a list of some of the semantic elements in HTML.

Tag	Description
<article>	Defines independent, self-contained content
<aside>	Defines content aside from the page content
<details>	Defines additional details that the user can view or hide
<figcaption>	Defines a caption for a <figure> element
<figure>	Specifies self-contained content, like illustrations, diagrams, photos, code listings, etc.
<footer>	Defines a footer for a document or section
<header>	Specifies a header for a document or section
<main>	Specifies the main content of a document
<mark>	Defines marked/highlighted text
<nav>	Defines navigation links
<section>	Defines a section in a document
<summary>	Defines a visible heading for a <details> element
<time>	Defines a date/time

--HTML Style Guide--

A consistent, clean, and tidy HTML code makes it easier for others to read and understand your code.

Here are some guidelines and tips for creating good HTML code.

-Always Declare Document Type-

Always declare the document type as the first line in your document.

The correct document type for HTML is:

<!DOCTYPE html>

-Use Lowercase Element Names-

HTML allows mixing uppercase and lowercase letters in element names.

However, we recommend using lowercase element names, because:

Mixing uppercase and lowercase names looks bad
Developers normally use lowercase names
Lowercase looks cleaner
Lowercase is easier to write

-Close All HTML Elements-

In HTML, you do not have to close all elements (for example the <p> element).

However, we strongly recommend closing all HTML elements.

-Use Lowercase Attribute Names-
-Always Quote Attribute Values-

HTML allows attribute values without quotes.

However, we recommend quoting attribute values, because:

Developers normally quote attribute values
Quoted values are easier to read
You MUST use quotes if the value contains spaces

-Always Specify alt, width, and height for Images-

Always specify the alt attribute for images. This attribute is important if the image for some reason cannot be displayed.

Also, always define the width and height of images. This reduces flickering, 
because the browser can reserve space for the image before loading.

Good:
<img src="html5.gif" alt="HTML5" style="width:128px;height:128px">

-Spaces and Equal Signs-
HTML allows spaces around equal signs. But space-less is easier to read and groups entities better together.

-Avoid Long Code Lines-

When using an HTML editor, it is NOT convenient to scroll right and left to read the HTML code.
Try to avoid too long code lines.

-Blank Lines and Indentation-

Do not add blank lines, spaces, or indentations without a reason.
For readability, add blank lines to separate large or logical code blocks.
For readability, add two spaces of indentation. Do not use the tab key.

-Never Skip the <title> Element-

The <title> element is required in HTML.

The contents of a page title is very important for search engine optimization (SEO)! The page title is used by search engine algorithms to decide the order when listing pages in search results.

The <title> element:

defines a title in the browser toolbar
provides a title for the page when it is added to favorites
displays a title for the page in search-engine results
So, try to make the title as accurate and meaningful as possible: 

<title>HTML Style Guide and Coding Conventions</title>

-Omitting <html> and <body>?-

An HTML page will validate without the <html> and <body> tags.
However, we strongly recommend to always add the <html> and <body> tags!
Omitting <body> can produce errors in older browsers.
Omitting <html> and <body> can also crash DOM and XML software.

-Omitting <head>?-
The HTML <head> tag can also be omitted.
Browsers will add all elements before <body>, to a default <head> element.
However, we recommend using the <head> tag.

-Close Empty HTML Elements?-

In HTML, it is optional to close empty elements.

Allowed:
<meta charset="utf-8">
Also Allowed:
<meta charset="utf-8" />

*If you expect XML/XHTML software to access your page, keep the closing slash (/), 
because it is required in XML and XHTML.*

-Add the lang Attribute-

You should always include the lang attribute inside the <html> tag, 
to declare the language of the Web page. This is meant to assist search engines and browsers.

<!DOCTYPE html>
<html lang="en-us">
<head>
  <title>Page Title</title>
</head>
<body>

<h1>This is a heading</h1>
<p>This is a paragraph.</p>

</body>
</html>

-Meta Data-

To ensure proper interpretation and correct search engine indexing, both the language and the character encoding 
<meta charset="charset"> should be defined as early as possible in an HTML document:

<!DOCTYPE html>
<html lang="en-us">
<head>
  <meta charset="UTF-8">
  <title>Page Title</title>
</head>

-Setting The Viewport-

The viewport is the user's visible area of a web page. It varies with the device - 
it will be smaller on a mobile phone than on a computer screen.
You should include the following <meta> element in all your web pages:
<meta name="viewport" content="width=device-width, initial-scale=1.0">
This gives the browser instructions on how to control the page's dimensions and scaling.
The width=device-width part sets the width of the page to follow the screen-width of the device 
(which will vary depending on the device).
The initial-scale=1.0 part sets the initial zoom level when the page is first loaded by the browser.

-HTML Comments-

Short comments should be written on one line, like this:

<!-- This is a comment -->
Comments that spans more than one line, should be written like this:

<!--
  This is a long comment example. This is a long comment example.
  This is a long comment example. This is a long comment example.
-->
Long comments are easier to observe if they are indented with two spaces.

-Using Style Sheets-

Use simple syntax for linking to style sheets (the type attribute is not necessary):

<link rel="stylesheet" href="styles.css">
Short CSS rules can be written compressed, like this:

p.intro {font-family:Verdana;font-size:16em;}

ong CSS rules should be written over multiple lines:

body {
  background-color: lightgrey;
  font-family: "Arial Black", Helvetica, sans-serif;
  font-size: 16em;
  color: black;
}

Place the opening bracket on the same line as the selector
Use one space before the opening bracket
Use two spaces of indentation
Use semicolon after each property-value pair, including the last
*Only use quotes around values if the value contains spaces*
Place the closing bracket on a new line, without leading spaces

-Loading JavaScript in HTML-

Use simple syntax for loading external scripts (the type attribute is not necessary):

<script src="myscript.js">

-Accessing HTML Elements with JavaScript-

Using "untidy" HTML code can result in JavaScript errors.

These two JavaScript statements will produce different results:

Example
getElementById("Demo").innerHTML = "Hello";

getElementById("demo").innerHTML = "Hello";

<p id="Demo">This is paragraph 1.</p>
<p id="demo">This is paragraph 2.</p>

<script>
// Only paragraph 2 will be overwritten
document.getElementById("demo").innerHTML = "HELLO.";
</script>

</body>
</html>

-Use Lower Case File Names-

Some web servers (Apache, Unix) are case sensitive about file names: "london.jpg" cannot be accessed as "London.jpg".

Other web servers (Microsoft, IIS) are not case sensitive: "london.jpg" can be accessed as "London.jpg".

If you use a mix of uppercase and lowercase, you have to be aware of this.

If you move from a case-insensitive to a case-sensitive server, even small errors will break your web!

To avoid these problems, always use lowercase file names!

-File Extensions-

HTML files should have a .html extension (.htm is allowed).

CSS files should have a .css extension.

JavaScript files should have a .js extension.

-Differences Between .htm and .html?-

There is no difference between the .htm and .html file extensions!

Both will be treated as HTML by any web browser and web server.

-Default Filenames-

When a URL does not specify a filename at the end (like "https://www.w3schools.com/"), 
the server just adds a default filename, such as "index.html", "index.htm", "default.html", or "default.htm".

If your server is configured only with "index.html" as the default filename, 
your file must be named "index.html", and not "default.html".

However, servers can be configured with more than one default filename; 
usually you can set up as many default filenames as you want.

--HTML Entities--

Reserved characters in HTML must be replaced with character entities.

Some characters are reserved in HTML.

If you use the less than (<) or greater than (>) signs in your text, the browser might mix them with tags.

Character entities are used to display reserved characters in HTML.

A character entity looks like this:

&entity_name;
OR

&#entity_number;

*To display a less than sign (<) we must write: &lt; or &#60;*

Advantage of using an entity name: An entity name is easy to remember.
Disadvantage of using an entity name: Browsers may not support all entity names, but the support for entity numbers is good.

-Non-breaking Space-

A commonly used entity in HTML is the non-breaking space: &nbsp;

A non-breaking space is a space that will not break into a new line.

Two words separated by a non-breaking space will stick together (not break into a new line). This is handy when breaking the words might be disruptive.

Examples:

§ 10
10 km/h
10 PM
Another common use of the non-breaking space is to prevent browsers from truncating spaces in HTML pages.

If you write 10 spaces in your text, the browser will remove 9 of them. To add real spaces to your text, you can use the &nbsp; character entity.

*Price of this beer: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wait for it... &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 5 $*

*Tip: The non-breaking hyphen (&#8209;) is used to define a hyphen character (‑) that does not break into a new line.*

	non-breaking space	&nbsp;	&#160;	
<	less than	&lt;	&#60;	
>	greater than	&gt;	&#62;	
&	ampersand	&amp;	&#38;	
"	double quotation mark	&quot;	&#34;	
'	single quotation mark (apostrophe)	&apos;	&#39;	
¢	cent	&cent;	&#162;	
£	pound	&pound;	&#163;	
¥	yen	&yen;	&#165;	
€	euro	&euro;	&#8364;	
©	copyright	&copy;	&#169;	
®	registered trademark	&reg;	&#174;

Note: Entity names are case sensitive.

-Combining Diacritical Marks-

A diacritical mark is a "glyph" added to a letter.

Some diacritical marks, like grave (  ̀) and acute (  ́) are called accents.

Diacritical marks can appear both above and below a letter, inside a letter, and between two letters.

Diacritical marks can be used in combination with alphanumeric characters to produce a character that is not present in the character set (encoding) used in the page.

Here are some examples:


Mark	Character	Construct	Result	Try it
 ̀	a	a&#768;	à	
 ́	a	a&#769;	á	
̂	a	a&#770;	â	
 ̃	a	a&#771;	ã	
 ̀	O	O&#768;	Ò	
 ́	O	O&#769;	Ó	
̂	O	O&#770;	Ô	
 ̃	O	O&#771;	Õ

--HTML Symbols--

Symbols that are not present on your keyboard can also be added by using entities.

-HTML Symbol Entities-

HTML entities were described in the previous chapter.

Many mathematical, technical, and currency symbols, are not present on a normal keyboard.

To add such symbols to an HTML page, you can use the entity name or the entity number (a decimal or a hexadecimal reference) for the symbol.

Display the euro sign, €, with an entity name, a decimal, and a hexadecimal value:

<p>I will display &euro;</p>
<p>I will display &#8364;</p>
<p>I will display &#x20AC;</p>

Will display as:
I will display €
I will display €
I will display €

Some Mathematical Symbols Supported by HTML
Char	Number	Entity	Description	Try it
∀	&#8704;	&forall;	FOR ALL	
∂	&#8706;	&part;	PARTIAL DIFFERENTIAL	
∃	&#8707;	&exist;	THERE EXISTS	
∅	&#8709;	&empty;	EMPTY SETS	
∇	&#8711;	&nabla;	NABLA	
∈	&#8712;	&isin;	ELEMENT OF	
∉	&#8713;	&notin;	NOT AN ELEMENT OF	
∋	&#8715;	&ni;	CONTAINS AS MEMBER	
∏	&#8719;	&prod;	N-ARY PRODUCT	
∑	&#8721;	&sum;	N-ARY SUMMATION

Some Greek Letters Supported by HTML
Char	Number	Entity	Description	Try it
Α	&#913;	&Alpha;	GREEK CAPITAL LETTER ALPHA	
Β	&#914;	&Beta;	GREEK CAPITAL LETTER BETA	
Γ	&#915;	&Gamma;	GREEK CAPITAL LETTER GAMMA	
Δ	&#916;	&Delta;	GREEK CAPITAL LETTER DELTA	
Ε	&#917;	&Epsilon;	GREEK CAPITAL LETTER EPSILON	
Ζ	&#918;	&Zeta;	GREEK CAPITAL LETTER ZETA

Some Other Entities Supported by HTML
Char	Number	Entity	Description	Try it
©	&#169;	&copy;	COPYRIGHT SIGN	
®	&#174;	&reg;	REGISTERED SIGN	
€	&#8364;	&euro;	EURO SIGN	
™	&#8482;	&trade;	TRADEMARK	
←	&#8592;	&larr;	LEFTWARDS ARROW	
↑	&#8593;	&uarr;	UPWARDS ARROW	
→	&#8594;	&rarr;	RIGHTWARDS ARROW	
↓	&#8595;	&darr;	DOWNWARDS ARROW	
♠	&#9824;	&spades;	BLACK SPADE SUIT	
♣	&#9827;	&clubs;	BLACK CLUB SUIT	
♥	&#9829;	&hearts;	BLACK HEART SUIT	
♦	&#9830;	&diams;	BLACK DIAMOND SUIT

--Using Emojis in HTML--

Emojis are characters from the UTF-8 character set: 😄 😍 💗

What are Emojis?
Emojis look like images, or icons, but they are not.

They are letters (characters) from the UTF-8 (Unicode) character set.

UTF-8 covers almost all of the characters and symbols in the world.

-The HTML charset Attribute-

To display an HTML page correctly, a web browser must know the character set used in the page.

This is specified in the <meta> tag:

<meta charset="UTF-8">
If not specified, UTF-8 is the default character set in HTML.

-UTF-8 Characters-

Many UTF-8 characters cannot be typed on a keyboard, but they can always be displayed using numbers (called entity numbers):

A is 65
B is 66
C is 67

<p>I will display A B C</p>
<p>I will display &#65; &#66; &#67;</p>

-Emoji Characters-

Emojis are also characters from the UTF-8 alphabet:

😄 is 128516
😍 is 128525
💗 is 128151

<h1>My First Emoji</h1>

<p>&#128512;</p>

Since Emojis are characters, they can be copied, displayed, and sized just like any other character in HTML.

<p style="font-size:48px">
&#128512; &#128516; &#128525; &#128151;
</p>

Some Emoji Symbols in UTF-8
Emoji	Value	Try it
🗻	&#128507;	
🗼	&#128508;	
🗽	&#128509;	
🗾	&#128510;	
🗿	&#128511;	
😀	&#128512;	
😁	&#128513;	
😂	&#128514;	
😃	&#128515;	
😄	&#128516;	
😅	&#128517;	

--HTML Encoding (Character Sets)--

To display an HTML page correctly, a web browser must know which character set to use.

-From ASCII to UTF-8-

ASCII was the first character encoding standard. ASCII defined 128 different characters 
that could be used on the internet: numbers (0-9), English letters (A-Z), and some special characters like ! $ + - ( ) @ < > .

ISO-8859-1 was the default character set for HTML 4. This character set supported 256 different character codes. HTML 4 also supported UTF-8.

ANSI (Windows-1252) was the original Windows character set. ANSI is identical to ISO-8859-1, except that ANSI has 32 extra characters.

The HTML5 specification encourages web developers to use the UTF-8 character set, which covers almost all of the characters and symbols in the world!

-The ASCII Character Set-
ASCII uses the values from 0 to 31 (and 127) for control characters.

ASCII uses the values from 32 to 126 for letters, digits, and symbols.

ASCII does not use the values from 128 to 255.

-The ANSI Character Set (Windows-1252)-
ANSI is identical to ASCII for the values from 0 to 127.

ANSI has a proprietary set of characters for the values from 128 to 159.

ANSI is identical to UTF-8 for the values from 160 to 255.

-The UTF-8 Character Set-
UTF-8 is identical to ASCII for the values from 0 to 127.

UTF-8 does not use the values from 128 to 159. 

UTF-8 is identical to both ANSI and 8859-1 for the values from 160 to 255.

UTF-8 continues from the value 256 with more than 10 000 different characters.

--HTML Uniform Resource Locators--

A URL is another word for a web address.

A URL can be composed of words (e.g. w3schools.com), or an Internet Protocol (IP) address (e.g. 192.68.20.50).

Most people enter the name when surfing, because names are easier to remember than numbers.

-URL - Uniform Resource Locator-

Web browsers request pages from web servers by using a URL.

A Uniform Resource Locator (URL) is used to address a document (or other data) on the web.

*A web address like https://www.w3schools.com/html/default.asp follows these syntax rules:*

*scheme://prefix.domain:port/path/filename*

**Explanation:

scheme - defines the type of Internet service (most common is http or https)
prefix - defines a domain prefix (default for http is www)
domain - defines the Internet domain name (like w3schools.com)
port - defines the port number at the host (default for http is 80)
path - defines a path at the server (If omitted: the root directory of the site)
filename - defines the name of a document or resource**

-Common URL Schemes-

The table below lists some common schemes:

Scheme	Short for	Used for
http	HyperText Transfer Protocol	Common web pages. Not encrypted
https	Secure HyperText Transfer Protocol	Secure web pages. Encrypted
ftp	File Transfer Protocol	Downloading or uploading files
file	 	A file on your computer

-URL Encoding-

*URLs can only be sent over the Internet using the ASCII character-set. If a URL contains characters outside the ASCII set, the URL has to be converted.

URL encoding converts non-ASCII characters into a format that can be transmitted over the Internet.

URL encoding replaces non-ASCII characters with a "%" followed by hexadecimal digits.

URLs cannot contain spaces. URL encoding normally replaces a space with a plus (+) sign, or %20.*

-ASCII Encoding Examples-

Your browser will encode input, according to the character-set used in your page.

The default character-set in HTML5 is UTF-8.

Character	From Windows-1252	From UTF-8
€	            %80	          %E2%82%AC
£	            %A3	          %C2%A3
©           	%A9	          %C2%A9
®	            %AE	          %C2%AE
À	            %C0	          %C3%80
Á	            %C1	          %C3%81
Â	            %C2	          %C3%82
Ã	            %C3	          %C3%83
Ä	            %C4	          %C3%84
Å	            %C5	          %C3%85

--HTML Versus XHTML--

XHTML is a stricter, more XML-based version of HTML.

What is XHTML?
XHTML stands for EXtensible HyperText Markup Language
XHTML is a stricter, more XML-based version of HTML
XHTML is HTML defined as an XML application
XHTML is supported by all major browsers

-Why XHTML?-

XML is a markup language where all documents must be marked up correctly (be "well-formed").

XHTML was developed to make HTML more extensible and flexible to work with other data formats (such as XML). 
In addition, browsers ignore errors in HTML pages, and try to display the website even if it has some errors in the markup.
So XHTML comes with a much stricter error handling.

-The Most Important Differences from HTML-

<!DOCTYPE> is mandatory
The xmlns attribute in <html> is mandatory
<html>, <head>, <title>, and <body> are mandatory
Elements must always be properly nested
Elements must always be closed
Elements must always be in lowercase
Attribute names must always be in lowercase
Attribute values must always be quoted
Attribute minimization is forbidden

-XHTML - <!DOCTYPE ....> Is Mandatory-
An XHTML document must have an XHTML <!DOCTYPE> declaration.

The <html>, <head>, <title>, and <body> elements must also be present, 
and the xmlns attribute in <html> must specify the xml namespace for the document.

Example
Here is an XHTML document with a minimum of required tags: 

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title>Title of document</title>
</head>
<body>

  some content here...

</body>
</html>

-XHTML Elements Must be Properly Nested-

-XHTML Elements Must Always be Closed-

-In XHTML, empty elements must always be closed, like this:-

Correct:
A break: <br />
A horizontal rule: <hr />
An image: <img src="happy.gif" alt="Happy face" />

-XHTML Elements Must be in Lowercase-

-XHTML Attribute Names Must be in Lowercase-

-XHTML Attribute Values Must be Quoted-

-XHTML Attribute Minimization is Forbidden-

--HTML Forms--

An HTML form is used to collect user input. The user input is most often sent to a server for processing.

<!DOCTYPE html>
<html>
<body>

<h2>HTML Forms</h2>

<form action="/action_page.php">
  <label for="fname">First name:</label><br>
  <input type="text" id="fname" name="fname" value="John"><br>
  <label for="lname">Last name:</label><br>
  <input type="text" id="lname" name="lname" value="Doe"><br><br>
  <input type="submit" value="Submit">
</form> 

<p>If you click the "Submit" button, the form-data will be sent to a page called "/action_page.php".</p>

</body>
</html>

-The <form> Element-

The HTML <form> element is used to create an HTML form for user input:

<form>
.
form elements
.
</form>

The <form> element is a container for different types of input elements, such as: text fields, checkboxes, radio buttons, submit buttons, etc.

-The <input> Element-

The HTML <input> element is the most used form element.

An <input> element can be displayed in many ways, depending on the type attribute.

Here are some examples:

<input type="text">	Displays a single-line text input field
<input type="radio">	Displays a radio button (for selecting one of many choices)
<input type="checkbox">	Displays a checkbox (for selecting zero or more of many choices)
<input type="submit">	Displays a submit button (for submitting the form)
<input type="button">	Displays a clickable button

-Text Fields-

The <input type="text"> defines a single-line input field for text input.

<form>
  <label for="fname">First name:</label><br>
  <input type="text" id="fname" name="fname"><br>
  <label for="lname">Last name:</label><br>
  <input type="text" id="lname" name="lname">
</form>

Note: The form itself is not visible. Also note that the default width of an input field is 20 characters.

-The <label> Element-  *forms*

The <label> tag defines a label for many form elements.

The <label> element is useful for screen-reader users, because the screen-reader will read out loud the label when 
the user focus on the input element.

The <label> element also help users who have difficulty clicking on very small regions (such as radio buttons or checkboxes) - because when the user clicks the text within the <label> element, it toggles the radio button/checkbox.

The for attribute of the <label> tag should be equal to the id attribute of the <input> element to bind them together.

-Radio Buttons-

The <input type="radio"> defines a radio button.

Radio buttons let a user select ONE of a limited number of choices.

<p>Choose your favorite Web language:</p>

<form>
  <input type="radio" id="html" name="fav_language" value="HTML">
  <label for="html">HTML</label><br>
  <input type="radio" id="css" name="fav_language" value="CSS">
  <label for="css">CSS</label><br>
  <input type="radio" id="javascript" name="fav_language" value="JavaScript">
  <label for="javascript">JavaScript</label>
</form> 

</body>
</html>

-Checkboxes-

The <input type="checkbox"> defines a checkbox.

Checkboxes let a user select ZERO or MORE options of a limited number of choices.

<form>
  <input type="checkbox" id="vehicle1" name="vehicle1" value="Bike">
  <label for="vehicle1"> I have a bike</label><br>
  <input type="checkbox" id="vehicle2" name="vehicle2" value="Car">
  <label for="vehicle2"> I have a car</label><br>
  <input type="checkbox" id="vehicle3" name="vehicle3" value="Boat">
  <label for="vehicle3"> I have a boat</label>
</form>

-The Submit Button-

The <input type="submit"> defines a button for submitting the form data to a form-handler.

The form-handler is typically a file on the server with a script for processing input data.

The form-handler is specified in the form's action attribute.

-The Name Attribute for <input>-

Notice that each input field must have a name attribute to be submitted.

If the name attribute is omitted, the value of the input field will not be sent at all.

Example
This example will not submit the value of the "First name" input field: 

<form action="/action_page.php">
  <label for="fname">First name:</label><br>
  <input type="text" id="fname" value="John"><br><br>  // name="fname"
  <input type="submit" value="Submit">
</form>

--HTML Form Attributes--
-The Action Attribute-

The action attribute defines the action to be performed when the form is submitted.

Usually, the form data is sent to a file on the server when the user clicks on the submit button.

In the example below, the form data is sent to a file called "action_page.php". This file contains a server-side script that handles the form data:

Example
On submit, send form data to "action_page.php":

<form action="/action_page.php">
  <label for="fname">First name:</label><br>
  <input type="text" id="fname" name="fname" value="John"><br>
  <label for="lname">Last name:</label><br>
  <input type="text" id="lname" name="lname" value="Doe"><br><br>
  <input type="submit" value="Submit">
</form>

Tip: If the action attribute is omitted, the action is set to the current page.

-The Target Attribute-

The target attribute specifies where to display the response that is received after submitting the form.

The target attribute can have one of the following values:

Value	  Description
_blank	The response is displayed in a new window or tab
_self	The response is displayed in the current window
_parent	The response is displayed in the parent frame
_top	The response is displayed in the full body of the window
framename	The response is displayed in a named iframe

The default value is _self which means that the response will open in the current window.

Example
Here, the submitted result will open in a new browser tab:

<form action="/action_page.php" target="_blank">

-The Method Attribute-

The method attribute specifies the HTTP method to be used when submitting the form data.

The form-data can be sent as URL variables (with method="get") or as HTTP post transaction (with method="post").

The default HTTP method when submitting form data is GET.

Example
This example uses the GET method when submitting the form data:

<form action="/action_page.php" method="get">

This example uses the POST method when submitting the form data:

<form action="/action_page.php" method="post">

After you submit, notice that, unlike the GET method, the form values is NOT visible in the address bar of the new browser tab.

Notes on GET:

*Appends the form data to the URL, in name/value pairs*
NEVER use GET to send sensitive data! (the submitted form data is visible in the URL!)
The length of a URL is limited (2048 characters)
Useful for form submissions where a user wants to bookmark the result
GET is good for non-secure data, like query strings in Google
Notes on POST:

*Appends the form data inside the body of the HTTP request (the submitted form data is not shown in the URL)*
POST has no size limitations, and can be used to send large amounts of data.
Form submissions with POST cannot be bookmarked

-The Autocomplete Attribute-

The autocomplete attribute specifies whether a form should have autocomplete on or off.

When autocomplete is on, the browser automatically complete values based on values that the user has entered before.

A form with autocomplete on:

<form action="/action_page.php" autocomplete="on">

*-The Novalidate Attribute-*

The novalidate attribute is a boolean attribute.

When present, it specifies that the form-data (input) should not be validated when submitted.

A form with a novalidate attribute:

<form action="/action_page.php" novalidate>

Note:The novalidate attribute of the form tag is not supported in Safari 10 (or earlier).

Attribute	      Description
accept-charset	Specifies the character encodings used for form submission
action	Specifies where to send the form-data when a form is submitted
autocomplete	Specifies whether a form should have autocomplete on or off
enctype	Specifies how the form-data should be encoded when submitting it to the server (only for method="post")
method	Specifies the HTTP method to use when sending form-data
name	Specifies the name of the form
novalidate	Specifies that the form should not be validated when submitted
rel	Specifies the relationship between a linked resource and the current document
target	Specifies where to display the response that is received after submitting the form

--HTML Form Elements--

-The HTML <form> Elements-
The HTML <form> element can contain one or more of the following form elements:

<input>
<label>
<select>
<textarea>
<button>
<fieldset>
<legend>
<datalist>
<output>
<option>
<optgroup>

-The <input> Element-
One of the most used form element is the <input> element.

The <input> element can be displayed in several ways, depending on the type attribute.

<label for="fname">First name:</label>
<input type="text" id="fname" name="fname">

-The <label> Element-

he <label> element defines a label for several form elements.

The <label> element is useful for screen-reader users, because the screen-reader will read out loud the label when the user focus on the input element.

The <label> element also help users who have difficulty clicking on very small regions (such as radio buttons or checkboxes) - 
because when the user clicks the text within the <label> element, it toggles the radio button/checkbox.

The for attribute of the <label> tag should be equal to the id attribute of the <input> element to bind them together.

-The <select> Element-

The <select> element defines a drop-down list:

Example
<label for="cars">Choose a car:</label>
<select id="cars" name="cars">
  <option value="volvo">Volvo</option>
  <option value="saab">Saab</option>
  <option value="fiat">Fiat</option>
  <option value="audi">Audi</option>
</select>

The <option> elements defines an option that can be selected.

By default, the first item in the drop-down list is selected.

To define a pre-selected option, add the selected attribute to the option:

Example
<option value="fiat" selected>Fiat</option>

-Visible Values-

Use the size attribute to specify the number of visible values:

<label for="cars">Choose a car:</label>
<select id="cars" name="cars" size="3">
  <option value="volvo">Volvo</option>
  <option value="saab">Saab</option>
  <option value="fiat">Fiat</option>
  <option value="audi">Audi</option>
</select>

Allow Multiple Selections:

Use the multiple attribute to allow the user to select more than one value:

Example
<label for="cars">Choose a car:</label>
<select id="cars" name="cars" size="4" multiple>
  <option value="volvo">Volvo</option>
  <option value="saab">Saab</option>
  <option value="fiat">Fiat</option>
  <option value="audi">Audi</option>
</select>

-The <textarea> Element-

The <textarea> element defines a multi-line input field (a text area):

<textarea name="message" rows="10" cols="30">
The cat was playing in the garden.
</textarea>

The rows attribute specifies the visible number of lines in a text area.

The cols attribute specifies the visible width of a text area.

You can also define the size of the text area by using CSS:

<textarea name="message" style="width:200px; height:600px;">
The cat was playing in the garden.
</textarea>

*-The <button> Element-*

The <button> element defines a clickable button:

<button type="button" onclick="alert('Hello World!')">Click Me!</button>

Note: Always specify the type attribute for the button element. Different browsers may use different default types for the button element.

-The <fieldset> and <legend> Elements-

The <fieldset> element is used to group related data in a form.

The <legend> element defines a caption for the <fieldset> element.

<form action="/action_page.php">
  <fieldset>
    <legend>Personalia:</legend>
    <label for="fname">First name:</label><br>
    <input type="text" id="fname" name="fname" value="John"><br>
    <label for="lname">Last name:</label><br>
    <input type="text" id="lname" name="lname" value="Doe"><br><br>
    <input type="submit" value="Submit">
  </fieldset>
</form>

-The <datalist> Element-

The <datalist> element specifies a list of pre-defined options for an <input> element.

Users will see a drop-down list of the pre-defined options as they input data.

The list attribute of the <input> element, must refer to the id attribute of the <datalist> element.

Example
<form action="/action_page.php">
  <input list="browsers">
  <datalist id="browsers">
    <option value="Internet Explorer">
    <option value="Firefox">
    <option value="Chrome">
    <option value="Opera">
    <option value="Safari">
  </datalist>
</form>

Note: The datalist tag is not supported in Safari prior version 12.1.

*-The <output> Element-*

The <output> element represents the result of a calculation (like one performed by a script).

Perform a calculation and show the result in an <output> element:

<form action="/action_page.php"
  oninput="x.value=parseInt(a.value)+parseInt(b.value)">
  0
  <input type="range"  id="a" name="a" value="50">
  100 +
  <input type="number" id="b" name="b" value="50">
  =
  <output name="x" for="a b"></output>
  <br><br>
  <input type="submit">
</form>

Note: The output element is not supported in Edge prior version 13.

Tag	Description
<form>	Defines an HTML form for user input
<input>	Defines an input control
<textarea>	Defines a multiline input control (text area)
<label>	Defines a label for an <input> element
<fieldset>	Groups related elements in a form
<legend>	Defines a caption for a <fieldset> element
<select>	Defines a drop-down list
<optgroup>	Defines a group of related options in a drop-down list
<option>	Defines an option in a drop-down list
<button>	Defines a clickable button
<datalist>	Specifies a list of pre-defined options for input controls
<output>	Defines the result of a calculation

--Input Types--

-HTML Input Types-
Here are the different input types you can use in HTML:

<input type="button">
<input type="checkbox">
<input type="color">
<input type="date">
<input type="datetime-local">
<input type="email">
<input type="file">
<input type="hidden">
<input type="image">
<input type="month">
<input type="number">
<input type="password">
<input type="radio">
<input type="range">
<input type="reset">
<input type="search">
<input type="submit">
<input type="tel">
<input type="text">
<input type="time">
<input type="url">
<input type="week">

Tip: The default value of the type attribute is "text".

-Input Type Text-
<input type="text"> defines a single-line text input field:

-Input Type Password-
<input type="password"> defines a password field:

Example
<form>
  <label for="username">Username:</label><br>
  <input type="text" id="username" name="username"><br>
  <label for="pwd">Password:</label><br>
  <input type="password" id="pwd" name="pwd">
</form>

The characters in a password field are masked (shown as asterisks or circles).

-Input Type Submit-

<input type="submit"> defines a button for submitting form data to a form-handler.

The form-handler is typically a server page with a script for processing input data.

The form-handler is specified in the form's action attribute:

Example
<form action="/action_page.php">
  <label for="fname">First name:</label><br>
  <input type="text" id="fname" name="fname" value="John"><br>
  <label for="lname">Last name:</label><br>
  <input type="text" id="lname" name="lname" value="Doe"><br><br>
  <input type="submit" value="Submit">
</form>

If you omit the submit button's value attribute, the button will get a default text: ->submit<-

-Input Type Reset-

<input type="reset"> defines a reset button that will reset all form values to their default values:

Example
<form action="/action_page.php">
  <label for="fname">First name:</label><br>
  <input type="text" id="fname" name="fname" value="John"><br>
  <label for="lname">Last name:</label><br>
  <input type="text" id="lname" name="lname" value="Doe"><br><br>
  <input type="submit" value="Submit">
  <input type="reset">
</form>

If you change the input values and then click the "Reset" button, the form-data will be reset to the default values.

-Input Type Radio-























































CSS ANIMATIONS
--HTML--
<div id="cuadrado"></div>

--CSS--
#cuadrado {
  width: 200px;
  height: 200px;
  background: #aaa;
  animation-name: mianimacion;
  animation-duration: 4s;
  /*animation-delay: 2s;*/
  position: relative;
  animation-direction: reverse;
  animation-timing-function: ease;
  animation-iteration-count: infinite;
}

@keyframes mianimacion {
  0% {background:#aaa;left: 0px;top:0px;}
  25% {background:red;left:300px;top:0px}
  50% {background:green;left:300px;top:300px}
  75% {background:pink;left:0px;top:300px}
  100% {background:blue;left:0;top:0px}
}
